/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * TiDev Titanium Mobile
 * Copyright TiDev, Inc. 04/07/2022-Present
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.zendesk;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;

import android.util.Log;

import androidx.annotation.NonNull;

import com.auth0.jwt.JWT;

import java.util.HashMap;
import java.util.Map;

import zendesk.android.FailureCallback;
import zendesk.android.SuccessCallback;
import zendesk.android.Zendesk;
import zendesk.android.ZendeskUser;
import zendesk.messaging.android.DefaultMessagingFactory;
import zendesk.messaging.android.push.PushNotifications;

@Kroll.module(name = "TiZendesk", id = "ti.zendesk")
public class TiZendeskModule extends KrollModule {

    // Methods

    @Kroll.method
    public void initialize(KrollDict params) {
        String channelKey = params.getString("channelKey");

        Zendesk.initialize(
                TiApplication.getAppRootOrCurrentActivity(),
                channelKey,
                zendesk -> Log.i("TiZendesk", "Initialization successful"),
                error -> Log.e("TiZendesk", "Messaging failed to initialize", error),
                new DefaultMessagingFactory()
        );
    }

    @Kroll.method
    public void loginUser(KrollDict params) {
        if (params != null) {
            String externalId = params.getString("externalId");
            String name = params.getString("name");
            String email = params.getString("email");

            if (externalId != null && name != null && email != null) {
                HashMap<String, String> payload = new HashMap<>() {};
                payload.put("externalId", externalId);
                payload.put("name", name);
                payload.put("email", email);

                String jwt = JWT.create()
                        .withPayload(payload)
                        .toString();

                Log.w("TiZendesk", "Created JWT: " + jwt);

                Zendesk.getInstance().loginUser(jwt, value -> {
                    Log.d("TiZendesk", "Authenticated successfully!");
                }, error -> {
                    Log.e("TiZendesk", "Authentication failed!", error);
                });
            }
        }
    }

    @Kroll.method
    public void showMessaging() {
        Zendesk.getInstance().getMessaging().showMessaging(TiApplication.getAppCurrentActivity());
    }

    @Kroll.method
    public void updatePushToken(String pushToken) {
        PushNotifications.updatePushNotificationToken(pushToken);
    }
}

